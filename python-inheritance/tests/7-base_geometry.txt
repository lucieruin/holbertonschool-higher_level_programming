The 7-base_geometry Module
=========================

Module to import to use ``base_geometry``
This module defines the value of base_geometry

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator(None, "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] None must be an integer

    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> try:
    ...     bg.integer_validator("name", -5)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] name must be greater than 0

    >>> try:
    ...     bg.integer_validator(-10, "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] -10 must be an integer

    >>> try:
    ...     bg.integer_validator('inf', "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] inf must be an integer

    >>> try:
    ...     bg.integer_validator("name", 'nane')
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", 7.5)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] name must be greater than 0

    >>> try:
    ...     bg.integer_validator("name", '@')
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

    >>> try:
    ...     bg.integer_validator("name", "John, "Jumbo")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    Traceback (most recent call last):
    SyntaxError: unterminated string literal (detected at line 2)

    >>> try:
    ...     bg.integer_validator((1, 2), "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] (1, 2) must be an integer

    >>> try:
    ...     bg.integer_validator("inf_float", 1e400)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] inf_float must be an integer

    >>> try:
    ...     bg.integer_validator("name", (5, ))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer